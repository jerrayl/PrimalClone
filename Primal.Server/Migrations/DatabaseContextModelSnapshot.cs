// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Primal;

#nullable disable

namespace Primal.Server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("Primal.Entities.Attack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BonusDamage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BossId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BossPart")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EmpowerTokensUsed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RerollTokensUsed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BossId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Attacks");
                });

            modelBuilder.Entity("Primal.Entities.AttackMinion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttackId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AttackId");

                    b.HasIndex("MinionId");

                    b.ToTable("AttackMinions");
                });

            modelBuilder.Entity("Primal.Entities.Boss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActionComponentIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Defence")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Direction")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EncounterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Health")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Might")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TargetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("XPosition")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YPosition")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EncounterId")
                        .IsUnique();

                    b.HasIndex("TargetId");

                    b.ToTable("Bosses");
                });

            modelBuilder.Entity("Primal.Entities.BossAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BossId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stage")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BossId");

                    b.ToTable("BossActions");
                });

            modelBuilder.Entity("Primal.Entities.BossAttack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BossId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BossId");

                    b.ToTable("BossAttacks");
                });

            modelBuilder.Entity("Primal.Entities.BossAttackPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BossAttackId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BossAttackId");

                    b.HasIndex("PlayerId");

                    b.ToTable("BossAttackPlayers");
                });

            modelBuilder.Entity("Primal.Entities.Encounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CharacterPerformingAction")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateStarted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Encounters");
                });

            modelBuilder.Entity("Primal.Entities.EncounterMightDeck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EncounterId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFreeCompanyDeck")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EncounterId");

                    b.ToTable("EncounterMightDecks");
                });

            modelBuilder.Entity("Primal.Entities.EncounterPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentAnimus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentHealth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EncounterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tokens")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("XPosition")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YPosition")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EncounterId");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("EncounterPlayers");
                });

            modelBuilder.Entity("Primal.Entities.FreeCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FreeCompanies");
                });

            modelBuilder.Entity("Primal.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Battleflow")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Defence")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Effects")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Might")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Primal.Entities.MightCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AttackId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BossAttackId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeckId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCritical")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDrawnFromCritical")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AttackId");

                    b.HasIndex("BossAttackId");

                    b.HasIndex("DeckId");

                    b.ToTable("MightCards");
                });

            modelBuilder.Entity("Primal.Entities.Minion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Defence")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EncounterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Might")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("XPosition")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YPosition")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EncounterId");

                    b.ToTable("Minons");
                });

            modelBuilder.Entity("Primal.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnimusRegen")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Class")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Defence")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FreeCompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxAnimus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Might")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FreeCompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Primal.Entities.PlayerAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Battleflow")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerAbilities");
                });

            modelBuilder.Entity("Primal.Entities.PlayerItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Battleflow")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerItems");
                });

            modelBuilder.Entity("Primal.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Primal.Entities.Attack", b =>
                {
                    b.HasOne("Primal.Entities.Boss", "Boss")
                        .WithMany()
                        .HasForeignKey("BossId");

                    b.HasOne("Primal.Entities.Player", "Player")
                        .WithMany("Attacks")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boss");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Primal.Entities.AttackMinion", b =>
                {
                    b.HasOne("Primal.Entities.Attack", "Attack")
                        .WithMany("AttackMinions")
                        .HasForeignKey("AttackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Primal.Entities.Minion", "Minion")
                        .WithMany()
                        .HasForeignKey("MinionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attack");

                    b.Navigation("Minion");
                });

            modelBuilder.Entity("Primal.Entities.Boss", b =>
                {
                    b.HasOne("Primal.Entities.Encounter", "Encounter")
                        .WithOne("Boss")
                        .HasForeignKey("Primal.Entities.Boss", "EncounterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Primal.Entities.EncounterPlayer", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId");

                    b.Navigation("Encounter");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Primal.Entities.BossAction", b =>
                {
                    b.HasOne("Primal.Entities.Boss", "Boss")
                        .WithMany("BossActions")
                        .HasForeignKey("BossId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boss");
                });

            modelBuilder.Entity("Primal.Entities.BossAttack", b =>
                {
                    b.HasOne("Primal.Entities.Boss", "Boss")
                        .WithMany()
                        .HasForeignKey("BossId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boss");
                });

            modelBuilder.Entity("Primal.Entities.BossAttackPlayer", b =>
                {
                    b.HasOne("Primal.Entities.BossAttack", "BossAttack")
                        .WithMany("BossAttackPlayers")
                        .HasForeignKey("BossAttackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Primal.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BossAttack");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Primal.Entities.EncounterMightDeck", b =>
                {
                    b.HasOne("Primal.Entities.Encounter", "Encounter")
                        .WithMany("EncounterMightDecks")
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Encounter");
                });

            modelBuilder.Entity("Primal.Entities.EncounterPlayer", b =>
                {
                    b.HasOne("Primal.Entities.Encounter", "Encounter")
                        .WithMany("EncounterPlayers")
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Primal.Entities.Player", "Player")
                        .WithOne("EncounterPlayer")
                        .HasForeignKey("Primal.Entities.EncounterPlayer", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Encounter");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Primal.Entities.MightCard", b =>
                {
                    b.HasOne("Primal.Entities.Attack", null)
                        .WithMany("MightCards")
                        .HasForeignKey("AttackId");

                    b.HasOne("Primal.Entities.BossAttack", null)
                        .WithMany("MightCards")
                        .HasForeignKey("BossAttackId");

                    b.HasOne("Primal.Entities.EncounterMightDeck", "Deck")
                        .WithMany("MightCards")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("Primal.Entities.Minion", b =>
                {
                    b.HasOne("Primal.Entities.Encounter", "Encounter")
                        .WithMany("Minions")
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Encounter");
                });

            modelBuilder.Entity("Primal.Entities.Player", b =>
                {
                    b.HasOne("Primal.Entities.FreeCompany", "FreeCompany")
                        .WithMany("Players")
                        .HasForeignKey("FreeCompanyId");

                    b.HasOne("Primal.Entities.User", "User")
                        .WithMany("Players")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FreeCompany");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Primal.Entities.PlayerAbility", b =>
                {
                    b.HasOne("Primal.Entities.Player", null)
                        .WithMany("PlayerAbilities")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Primal.Entities.PlayerItem", b =>
                {
                    b.HasOne("Primal.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Primal.Entities.Player", null)
                        .WithMany("PlayerItems")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Primal.Entities.Attack", b =>
                {
                    b.Navigation("AttackMinions");

                    b.Navigation("MightCards");
                });

            modelBuilder.Entity("Primal.Entities.Boss", b =>
                {
                    b.Navigation("BossActions");
                });

            modelBuilder.Entity("Primal.Entities.BossAttack", b =>
                {
                    b.Navigation("BossAttackPlayers");

                    b.Navigation("MightCards");
                });

            modelBuilder.Entity("Primal.Entities.Encounter", b =>
                {
                    b.Navigation("Boss")
                        .IsRequired();

                    b.Navigation("EncounterMightDecks");

                    b.Navigation("EncounterPlayers");

                    b.Navigation("Minions");
                });

            modelBuilder.Entity("Primal.Entities.EncounterMightDeck", b =>
                {
                    b.Navigation("MightCards");
                });

            modelBuilder.Entity("Primal.Entities.FreeCompany", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("Primal.Entities.Player", b =>
                {
                    b.Navigation("Attacks");

                    b.Navigation("EncounterPlayer")
                        .IsRequired();

                    b.Navigation("PlayerAbilities");

                    b.Navigation("PlayerItems");
                });

            modelBuilder.Entity("Primal.Entities.User", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
